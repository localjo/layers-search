{"version":3,"sources":["components/LayerList/index.js","components/LayerSearch/index.js","App.js","registerServiceWorker.js","index.js"],"names":["LayerList","this","props","layers","filter","length","layer","title","console","log","toLowerCase","includes","map","key","id","Component","LayerSearch","context","state","e","setState","target","value","type","placeholder","onChange","updateFilter","App","request","err","res","body","parseString","result","Capabilities","Contents","Layer","_","getLayers","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"ibAEqBA,G,wLACT,IAAD,EACkBC,KAAKC,MAAxBC,EADC,EACDA,OAAQC,EADP,EACOA,OACd,OAAKD,GAAUA,EAAOE,OAAS,EAAU,2CAEvC,4BACGF,EAAOC,QAAO,SAACE,GACd,QAAKA,EAAMC,QACXC,QAAQC,IAAIH,EAAMC,OACXD,EAAMC,MAAMG,cAAcC,SAASP,EAAOM,mBAChDE,KAAI,SAACN,GACN,OAAQ,wBAAIO,IAAKP,EAAMQ,IAAKR,EAAMC,e,GAXLQ,cCClBC,E,YACnB,WAAYd,EAAOe,GAAU,IAAD,8BAC1B,4CAAMf,EAAOe,KACRC,MAAQ,CAACd,OAAQ,IAFI,E,0EAIfe,GACXlB,KAAKmB,SAAS,CAAChB,OAAQe,EAAEE,OAAOC,U,+BAExB,IAAD,OACDlB,EAAWH,KAAKiB,MAAhBd,OACAD,EAAWF,KAAKC,MAAhBC,OACN,OACE,6BACE,2BAAOoB,KAAK,OAAOC,YAAY,SAASF,MAAOlB,EAAQqB,SAAU,SAACN,GAAD,OAAK,EAAKO,aAAaP,MACxF,kBAAC,EAAD,CAAWhB,OAAQA,EAAQC,OAAQA,S,GAdFW,a,2BC0C1BY,E,YArCb,WAAYzB,EAAOe,GAAU,IAAD,8BAC1B,4CAAMf,EAAOe,KACRC,MAAQ,CACXf,OAAQ,IAHgB,E,yEAMf,IAAD,OACVyB,IAVe,uFAUK,SAACC,EAAKC,EAAKC,GACzBA,GACFC,sBAAYD,GAAM,SAACF,EAAKI,GACtB,IACI9B,EADY8B,EAAOC,aAAaC,SAAS,GAAGC,MACzBxB,KAAI,SAACN,GAC1B,MAAO,CACLC,MAAOD,EAAM,aAAa,GAAG+B,EAC7BvB,GAAIR,EAAM,sBAGdE,QAAQC,IAAIN,GACZ,EAAKiB,SAAS,CAACjB,OAAQA,Y,0CAM7BK,QAAQC,IAAI,kBACZR,KAAKqC,c,+BAEG,IACFnC,EAAWF,KAAKiB,MAAhBf,OACN,OACE,yBAAKoC,UAAU,OACb,kBAAC,EAAD,CAAapC,OAAQA,S,GAhCXY,aCGZyB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpC,QACf8B,UAAUC,cAAcQ,WAK1BjD,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBiD,OAAM,SAAAC,GACLnD,QAAQmD,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,iBAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,iBAAN,sBAENzB,EAwCX,SAAiCO,GAE/BqB,MAAMrB,GACHI,MAAK,SAAAkB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvB,MAAK,SAAAC,GACjCA,EAAauB,aAAaxB,MAAK,WAC7BT,OAAOC,SAASiC,eAKpB9B,EAAgBC,MAGnBW,OAAM,WACLlD,QAAQC,IACN,oEAzDAoE,CAAwB9B,GAHxBD,EAAgBC,OC7BxB+B,K","file":"static/js/main.376efa87.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class LayerList extends Component {\n  render() {\n    var { layers, filter } = this.props;\n    if (!layers || layers.length < 1) return <span>No layers</span>;\n    return (\n      <ul>\n        {layers.filter((layer)=>{\n          if (!layer.title) return false;\n          console.log(layer.title);\n          return layer.title.toLowerCase().includes(filter.toLowerCase());\n        }).map((layer)=>{\n          return (<li key={layer.id}>{layer.title}</li>);\n        })}\n      </ul>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport LayerList from '../LayerList';\n\nexport default class LayerSearch extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {filter: ''};\n  }\n  updateFilter(e) {\n    this.setState({filter: e.target.value});\n  }\n  render() {\n    var { filter } = this.state;\n    var { layers } = this.props;\n    return (\n      <div>\n        <input type=\"text\" placeholder=\"Search\" value={filter} onChange={(e)=>this.updateFilter(e)} />\n        <LayerList layers={layers} filter={filter} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport LayerSearch from './components/LayerSearch';\nimport request from 'request';\nimport { parseString } from 'xml2js';\nconst gcEndpoint = 'https://gibs.earthdata.nasa.gov/wmts/epsg4326/best/wmts.cgi?request=GetCapabilities';\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      layers: []\n    };\n  }\n  getLayers() {\n    request(gcEndpoint, (err, res, body)=>{\n      if (body) {\n        parseString(body, (err, result)=>{\n          var rawLayers = result.Capabilities.Contents[0].Layer;\n          var layers = rawLayers.map((layer)=>{\n            return {\n              title: layer['ows:Title'][0]._,\n              id: layer['ows:Identifier']\n            }\n          });\n          console.log(layers);\n          this.setState({layers: layers});\n        });\n      }\n    });\n  }\n  componentDidMount() {\n    console.log('Getting layers');\n    this.getLayers();\n  }\n  render() {\n    var { layers } = this.state;\n    return (\n      <div className=\"App\">\n        <LayerSearch layers={layers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}